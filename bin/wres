#!/usr/bin/env node

/**
 * Copyright 2015 Cm_Star. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


'use strict';

var fs = require('fs');
var path = require('path');
var ArgumentParser = require('argparse').ArgumentParser;
var wres = require('..');
var packageInfo = require('../package.json');
var yaml = require('js-yaml');

// Define and parse CLI arguments
var argparser = new ArgumentParser({
  version: packageInfo.version,
  addHelp: true,
  description: packageInfo.description
});
argparser.addArgument(
  ['-f', '--format'],
  {
    help: 'Specify an external Jade template to use (not recommended).',
    nargs: 1
  }
);
argparser.addArgument(
  ['-o', '--out'],
  {
    help: 'Specify output file/location.',
    nargs: 1,
    metavar: 'OUTPUT',
    dest: 'outfile'
  }
);
argparser.addArgument(
  ['-p', '--pretty'],
  {
    help: 'Output pretty HTML.',
    action: 'storeTrue'
  }
);
argparser.addArgument(
  ['--print-template'],
  {
    help: 'Print the template resume and exit.',
    action: 'storeTrue',
    dest: 'printTemplate'
  }
);
argparser.addArgument(
  ['-t', '--theme'],
  {
    help: 'Specify a pre-defined or external CSS theme.',
    nargs: 1
  }
);
argparser.addArgument(
  ['--list-themes'],
  {
    help: 'List pre-defined themes.',
    action: 'storeTrue',
    dest: 'listThemes'
  }
);
argparser.addArgument(
  ['resume'],
  {
    help: 'YAML or JSON file containing the resume information',
    nargs: '?'
  }
);
var args = argparser.parseArgs();

// List pre-defined themes, if specified
if (args.listThemes) {
  var files = fs.readdirSync(path.resolve(__dirname, '../styles'));
  files.forEach(function(e, i, a) {
    a[i] = path.basename(e, path.extname(e));
  });
  console.log('Available themes: ' + files);
  process.exit(0);
}
// Print the template, if specified
if (args.printTemplate) {
  var template = fs.readFileSync(
    path.resolve(__dirname, '../examples/template.yml'), 'utf8'
  );
  if (args.outfile)
    fs.writeFileSync(args.outfile[0], template);
  else
    console.log(template);
  process.exit(0);
}

// Assemble options
var options = {
  pretty: args.pretty
};

// Write generated resume to STDOUT or output file
try {
  var output = wres.render(
    args.format ? fs.readFileSync(path.resolve(args.format[0]), 'utf8') : null,
    args.theme ? fs.readFileSync(path.resolve(args.theme[0]), 'utf8') : null,
    fs.readFileSync(args.resume, 'utf8'),
    options
  );
} catch (e) {
  console.error(e.message);
  process.exit(1);
}

if (args.outfile) {
  fs.writeFileSync(args.outfile[0], output);
} else {
  console.log(output);
}
process.exit(0);
